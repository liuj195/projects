import $ from "jquery";
import { exportToExcel } from "../../components/utils/utils";

/**
 * webServiceActions
 *
 * functions that directly call the yk1 web services along with the callback handlers
 *
 */

window.$ = window.jQuery = $;
//import { getGraphFakeData } from "../fakeData/getGraph";
const yk1WebServices = function(Y) {
  //var token;
  var seid;

  // I did this in case there were multiple servers to remember, for example, if Srikar on his machine has a different url
  var server = "api/yk1/";

  console.log("jQuery version: " + window.jQuery.fn.jquery);
  // Y.onFail({
  //   status: xhr.status,
  //   msg: null,
  //   headerMsg: xhr.getResponseHeader("errorMessage"),
  // });
  // called when AJAX call fails
  Y.onFail = function({ status, msg, headerMsg, isLogout }) {
    //reset timer
    clearTimeout(window.timerInstance);
    window.softLogout(1500000);
    console.log("onFail: " + status + "|" + msg);
    if (status === 408) {
      //only display if total time elpased in global timer is above 12 hours
      if (window.timeElapsed() >= 43200000) {
        Y.handleLogout();
        return;
      }
      //if 408 and under 12 hours and isLogout is true
      else if (isLogout) {
        window.location = window.yk1URL;
        return;
      }
      Y.closeLoader(status, msg, headerMsg);
      //in app.js
      return;
      //204 messages sent as an array are from getGraph where tins have no
    } else if (status === 204 || status === 200) {
      if (headerMsg) {
        if (msg instanceof Array) {
          msg = formatTins(msg);
        }
      } else {
        //for 204 status alert from TST. The yk1 alert is generated by closeLoader
        window.alert(msg);
      }
    } else if (isLogout) {
      window.location = window.yk1URL;
      return;
    } else {
      //  headerMsg = document.defaultView.errorList.errorMessage + " " + headerMsg;
      headerMsg = document.defaultView.errorList.errorMessage + " " + headerMsg;
    }
    //closeLoader located in app.js
    Y.closeLoader(status, msg, headerMsg);
  };
  function formatTins(msg) {
    let tinString = msg.map((tin) => {
      //iterate over each
      let year = getYear(tin);
      let tins = getTins(tin);
      let returnString = "";
      tins.forEach((singleTin) => {
        returnString =
          returnString + "Tin: " + singleTin + " " + "Year: " + year;
      });

      return returnString;
    });
    return tinString;
  }
  function getTins(tin) {
    let tins = tin.split(" ");
    let tinList = tins[1];
    let splitTins = tinList.split("\t");
    return splitTins;
  }
  function getYear(tin) {
    let tinSplit = tin.split(" ");
    let year = tinSplit[tinSplit.length - 1];
    return year;
  }
  Y.logOut = function() {
    $.ajax({
      type: "POST",
      url: server + "yk1Logout",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        if (xhr.status === 200) {
          //window.alert(xhr.getResponseHeader("errorMessage"));
          window.location = window.yk1URL;
          // window.location.href = window.yk1URL;
        } else {
          //if some other server code
          let msg = document.defaultView.errorList.noData;
          Y.closeLoader(alert(msg));
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
          isLogout: true,
        });
      }
    );
  };

  /**
   * TAX YEAR =======================================================================================
   */

  /**
   * getTaxYears() - Public method
   *
   * Calls the webservice for tax years.
   */
  Y.getTaxYears = function(callback) {
    $.ajax({
      type: "POST",
      url: server + "getTaxYears",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        if (xhr.status === 200) {
          Y.taxYearHandler(data, callback);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        console.log("headerMsg " + xhr.getResponseHeader("errorMessage"));
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };

  Y.getUserGuide = function() {
    $.ajax({
      type: "GET",
      url: server + "/SupplementalFiles/yk1_Training_Guide.zip",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        if (xhr.status === 200) {
          Y.taxYearHandler(data);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };
  Y.getDataDictionary = function(callback) {
    $.ajax({
      type: "GET",
      url: server + "/SupplementalFiles/Data_dictionary_yK1.zip",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        if (xhr.status === 200) {
          Y.taxYearHandler(data, callback);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };
  /*
   * GET Expand Graph ===============================================================================
   */
  /*
   * getExpandGraph()
   *
   * servletParams - JSON object for the webservice consisting of the following data:
   * 		sourceNodeXtin, allNodeList, taxYear, minNodes, isforced
   */
  Y.getExpandGraph = function(servletParams, graphId, sourceNodeId, cy) {
    // groupType is purely for Robohydra purposes
    console.log("getExpandGraph -> servletParams: " + servletParams);
    Y.showLoader();
    $.ajax({
      type: "POST",
      url: server + "expandGraph",
      data: servletParams,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        Y.closeLoader();
        if (xhr.status === 200) {
          Y.getExpandGraphHandler(graphId, data, sourceNodeId, cy);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        console.log("onFail 2: " + xhr.status);
        Y.onFail({
          status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };
  /*
   * GET ADDRESS ====================================================================================
   */
  /*
   * getAddresses()
   *
   * servletParams - JSON object for the webservice consisting of the following data:
   * 		sourceNodeXtin, allNodeList, taxYear, minNodes, isforced
   */

  Y.getAddresses = function(
    servletParams,
    sourceNodeXtin,
    taxYear,
    graphId,
    cy,
    excelExport
  ) {
    //console.log(sourceNodeXtin);
    Y.showLoader();
    $.ajax({
      type: "POST",
      url: server + "getAddressNodes",
      data: servletParams,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        Y.closeLoader();

        if (xhr.status === 200) {
          //Y.getAddressHandler(graphId, data, sourceNodeXtin, taxYear, cy);

          Y.getAddressHandler(
            graphId,
            data,
            sourceNodeXtin,
            taxYear,
            cy,
            servletParams,
            excelExport
          );
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };

  /*
   * GET PREPARERS ==================================================================================
   */
  /*
   * getPreparers()
   *
   * servletParams - JSON object for the webservice consisting of the following data:
   * 		sourceNodeXtin, allNodeList, taxYear, minNodes, isforced
   */
  Y.getPreparers = function(
    servletParams,
    sourceNodeXtin,
    taxYear,
    graphId,
    cy,
    excelExport
  ) {
    Y.showLoader();
    $.ajax({
      type: "POST",
      url: server + "getPreparerNodes",
      data: servletParams,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        let callback = null;
        if (xhr.status === 200) {
          if (data.preparerList.length === 0) {
            callback = function() {
              alert(document.defaultView.errorList.noPreparer);
            };
          } else {
            callback = Y.getPreparerHandler(
              graphId,
              data,
              sourceNodeXtin,
              taxYear,
              cy,
              servletParams,
              excelExport
            );
          }

          Y.closeLoader(callback);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };

  /*
   * GET RTF ========================================================================================
   */
  /*
   * getRtfData()
   *
   * servletParams - JSON object for the webservice consisting of the following data:
   * 		sourceNodeXtin, allNodeList, taxYear, minNodes, isforced
   */
  Y.getRtfData = function(myObject, graphId) {
    Y.showLoader();
    var servletParams = JSON.stringify(myObject);
    $.ajax({
      type: "POST",
      url: server + "getRtf",
      data: servletParams,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        Y.closeLoader();

        if (xhr.status === 200) {
          Y.createRTFtab(data, graphId, myObject);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };

  Y.getNodeInfo = function(servletParams) {
    Y.showLoader();
    console.log("In Y.getNodeInfo..");
    $.ajax({
      type: "POST",
      url: server + "getNodeInfo",
      data: servletParams,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        Y.closeLoader();
        if (xhr.status === 200) {
          Y.getNodeInfoHandler(data);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };

  Y.getLinkInfo = function(servletParams) {
    Y.showLoader();
    console.log("In Y.getLinkInfo..");
    $.ajax({
      type: "POST",
      url: server + "getLinkInfo",
      data: servletParams,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        Y.closeLoader();
        if (xhr.status === 200) {
          Y.getLinkInfoHandler(data);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };

  Y.getGroupNodeDetails = function(
    myObject,
    linkTin,
    graphId,
    cy,
    isPayeeDetail
  ) {
    Y.showLoader();
    var servletParams = JSON.stringify(myObject);
    //console.log("servletParams: " + servletParams);
    $.ajax({
      type: "POST",
      url: server + "getGroupNodeDetails",
      data: servletParams,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        //console.log("data: " + JSON.stringify(data));
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        Y.closeLoader();
        if (xhr.status === 200) {
          Y.showGroupNodeDetailHandler(graphId, data, myObject, linkTin, cy);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };

  // show node details (address/preprarer)
  Y.getNodeDetails = function(graphId, myObject, tinType, taxYear, nodeId, cy) {
    Y.showLoader();
    console.log("url: " + server + "getNodeDetails/" + tinType);
    var servletParams = JSON.stringify(myObject);
    console.log("getNodeDetails -> servletParams: " + servletParams);
    $.ajax({
      type: "POST",
      url: server + "getNodeDetails/",
      data: servletParams,
      headers: {
        Accept: "application/json",
        //Accept: 'text/xml, application/json',
        "Content-Type": "application/json",
        //'Content-Type': 'text/xml',
        "X-AUTH-TOKEN": Y.token,
        "X-SESSION-ID": Y.sessionId,
      },
    }).then(
      function(data, status, xhr) {
        //reset timer
        clearTimeout(window.timerInstance);
        window.softLogout(1500000);
        console.log(xhr.getAllResponseHeaders());
        console.log(data);
        var jsonString = JSON.stringify(data);
        Y.setToken(xhr.getResponseHeader("X-AUTH-TOKEN"));
        Y.setSessionID(xhr.getResponseHeader("X-SESSION-ID"));
        // use normally
        Y.closeLoader();
        if (xhr.status === 200) {
          Y.showNodeDetailsHandler(graphId, data, tinType, taxYear, nodeId, cy);
        } else {
          Y.onFail({
            status: xhr.status,
            msg: null,
            headerMsg: xhr.getResponseHeader("errorMessage"),
          });
        }
      },
      function(xhr, status, error) {
        Y.onFail({
          status: xhr.status,
          msg: null,
          headerMsg: xhr.getResponseHeader("errorMessage"),
        });
      }
    );
  };

  // from the entity node, pull up the list of addresses
  function showAddressNodes(nodeId, minNodes) {}

  return Y;
};

export default yk1WebServices;
